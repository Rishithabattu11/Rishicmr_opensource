#include <iostream>
using namespace std;

class TicTacToe 
{
public:
    TicTacToe() 
    {
        resetBoard();
    }

    void playGame() 
    {
        char player='X';
        int row,col;
        bool gameWon=false;
        while (true) 
        {
            printBoard();
            if (gameWon || isBoardFull()) {
                if (gameWon)
                    cout << "Player " << player << " wins!" << endl;
                else
                    cout << "It's a tie!" << endl;
                break;
            }
            cout << "Player " << player << ", enter row and column (0, 1, or 2): ";
            cin >> row >> col;
            if (isValidMove(row, col)) {
                makeMove(player, row, col);
                gameWon = checkWin(player);
                player = (player == 'X') ? 'O' : 'X';
            } else {
                cout << "Invalid move. Try again." << endl;
            }
        }
    }

private:
    char board[3][3];

    void resetBoard() {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                board[i][j] = ' ';
    }

    void printBoard() {
        cout << "Current board:" << endl;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                cout << board[i][j];
                if (j < 2) cout << " | ";
            }
            cout << endl;
            if (i < 2) cout << "--+---+--" << endl;
        }
    }

    bool isValidMove(int row, int col) {
        return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ';
    }

    void makeMove(char player, int row, int col) {
        board[row][col] = player;
    }

    bool checkWin(char player) {
        // Check rows
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
                return true;
        }
        // Check columns
        for (int j = 0; j < 3; ++j) {
            if (board[0][j] == player && board[1][j] == player && board[2][j] == player)
                return true;
        }
        // Check diagonals
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
            return true;
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
            return true;

        return false;
    }

    bool isBoardFull() {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                if (board[i][j] == ' ')
                    return false;
        return true;
    }
};

int main() {
    TicTacToe game;
    game.playGame();
    return 0;
}
